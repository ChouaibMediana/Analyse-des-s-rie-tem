# -*- coding: utf-8 -*-
"""miniProjetChouaib.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tmq1jUVbOut6BTZkQV_AyxH2zYTnGC3l
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller, acf, pacf
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMA


# Chargement des données
data = pd.read_csv("/content/AirPassengers.csv",
                   index_col="Month",
                   parse_dates=True)

# Vérification des données
print(data.head())

#etape 2
# Tracé de la série temporelle
plt.figure(figsize=(12, 6))
plt.plot(data.index ,data['#Passengers'],label="nbrPassagers")

# Ajout des éléments de graphique
plt.title("Série temporelle des passagers aériens", fontsize=16)
plt.xlabel("Date", fontsize=12)
plt.ylabel("Nombre de passagers", fontsize=12)
plt.grid(True)
plt.legend(loc="best")

plt.show()

#etape 3
# Tracé de la série temporelle
plt.figure(figsize=(12, 6))
plt.plot(data.index ,data['#Passengers'], color='blue', label="Nombre de passagers")

# Ajout des éléments de graphique
plt.title("Série temporelle des passagers aériens", fontsize=16)
plt.xlabel("Date", fontsize=12)
plt.ylabel("Nombre de passagers", fontsize=12)
plt.grid(True)

# Ajout de la légende plt.legend(loc="best")
data_resampled = data.resample("YE").mean()
plt.plot(data_resampled.index, data_resampled['#Passengers'], color='orange', label="Moyenne mensuelle")

data_shifted = data['#Passengers'].shift(periods=5)
plt.plot(data_shifted, color='red', label="Décalé de 5 mois")
plt.legend(loc = "best")

# Affichage du graphique
plt.show()

"""# Nouvelle section"""

# Étape 3.3 : Lissage (Windowing avec une fenêtre de 5 mois)

data_smoothed = data['#Passengers'].rolling(window=5).mean()
plt.plot(data.index, data['#Passengers'], label='Original', color='black', alpha=0.5)
print(" Lissage (Windowing avec une fenêtre de 5 mois :")
print(data_smoothed)
#Étape 3.4 : Sélection des dates où le nombre de passagers est inférieur à 120

data_below_120 = data[data['#Passengers'] < 120]
print("Dates où le nombre de passagers est inférieur à 120 :")
print(data_below_120)
plt.plot(data_below_120.index, data_below_120['#Passengers'], marker='o', color='purple', label='Passagers < 120')
plt.legend(loc = "best")

# Étape 4 : Vérification de la stationnarité
# 1. Moyenne mobile
rolling_mean = data['#Passengers'].rolling(window=12).mean()
rolling_var = data['#Passengers'].rolling(window=12).var()

plt.figure(figsize=(10, 6))
plt.plot(data.index, data['#Passengers'], label='Original', color='blue', alpha=0.5)
plt.plot(data.index, rolling_mean, label='Moyenne Mobile (window=12)', color='red')
plt.title('Moyenne Mobile')
plt.xlabel('Date')
plt.ylabel('Nombre de passagers')
plt.legend()
plt.grid(True)
plt.show()
# 2. Variance mobile
plt.figure(figsize=(10, 6))
plt.plot(data.index, rolling_var, label='Variance Mobile (window=12)', color='green')
plt.title('Variance Mobile')
plt.xlabel('Date')
plt.ylabel('Variance')
plt.legend()
plt.grid(True)
plt.show()

# 3. Test ADF (Dickey-Fuller)
result = adfuller(data['#Passengers'])
print("\nRésultat du test Dickey-Fuller:")
print(f"Statistique de test : {result[0]}")
print(f"p-valeur : {result[1]}")
print(f"Valeurs critiques : {result[4]}")
if result[1] < 0.05:
    print("La série est stationnaire (p-valeur < 0.05)")
else:
    print("La série n'est pas stationnaire (p-valeur >= 0.05)")

# Étape 5 : Transformation de la série temporelle
# 1. Différenciation temporelle
data_diff = data['#Passengers'].diff().dropna()
plt.figure(figsize=(10, 6))
plt.plot(data_diff.index, data_diff, label='Différenciée', color='purple')
plt.title('Série Temporelle Différenciée')
plt.xlabel('Date')
plt.ylabel('Variation du nombre de passagers')
plt.legend()
plt.grid(True)
plt.show()

# 2. Transformation logarithmique
data_log = np.log(data['#Passengers'])
data_log_diff = data_log.diff().dropna()
plt.figure(figsize=(10, 6))
plt.plot(data_log.index, data_log, label='Logarithmique', color='orange')
plt.title('Transformation Logarithmique')
plt.xlabel('Date')
plt.ylabel('Log(Nombre de passagers)')
plt.legend()
plt.grid(True)
plt.show()
# 3. Décomposition de la série temporelle
decomposition = seasonal_decompose(data['#Passengers'], model='multiplicative', period=12)
trend = decomposition.trend
seasonal = decomposition.seasonal
residual = decomposition.resid

plt.figure(figsize=(12, 8))
plt.subplot(411)
plt.plot(data.index, data['#Passengers'], label='Original', color='blue')
plt.legend(loc='upper left')
plt.subplot(412)
plt.plot(trend, label='Tendance', color='red')
plt.legend(loc='upper left')
plt.subplot(413)
plt.plot(seasonal, label='Saisonnalité', color='green')
plt.legend(loc='upper left')
plt.subplot(414)
plt.plot(residual, label='Résidu', color='purple')
plt.legend(loc='upper left')
plt.tight_layout()
plt.show()

# Étape 6 : Autocorrélation
# 1. Autocorrélation (ACF)
lag_acf = acf(data_diff, nlags=25)
plt.figure(figsize=(10, 6))
plt.stem(range(len(lag_acf)), lag_acf, linefmt='b-', markerfmt='bo', basefmt='r-')
plt.title('Fonction d autocorrélation (ACF)')
plt.xlabel('Lags')
plt.ylabel('Autocorrélation')
plt.grid(True)
plt.show()

# 2. Autocorrélation partielle (PACF)
lag_pacf = pacf(data_diff, nlags=25)
plt.figure(figsize=(10, 6))
plt.stem(range(len(lag_pacf)), lag_pacf, linefmt='b-', markerfmt='bo', basefmt='r-')
plt.title('Fonction d autocorrélation partielle (PACF)')
plt.xlabel('Lags')
plt.ylabel('Autocorrélation Partielle')
plt.grid(True)
plt.show()

# Étape 7 : Modélisation
# 1. Modèle ARIMA
model = ARIMA(data_log, order=(1, 1, 1))
model_fit = model.fit()
print(model_fit.summary())

# Ajustement de la fréquence des prévisions
forecast = model_fit.get_forecast(steps=12)
forecast_values = forecast.predicted_mean  # Valeurs prédites
forecast_index = pd.date_range(start=data.index[-1], periods=12, freq='MS')  # Aligner les index
forecast_series = pd.Series(forecast_values, index=forecast_index)

# Si les données sont logarithmiques, appliquer une transformation inverse
forecast_series = np.exp(forecast_series)  # Transformer les prévisions en échelle normale

# Tracé du graphique
plt.figure(figsize=(10, 6))
plt.plot(np.exp(data_log), label='Données Originales', color='blue')  # Transformer les données log si nécessaire
plt.plot(forecast_series, label='Prévisions', color='red')  # Ajouter les prévisions
plt.title('Prévisions avec ARIMA')
plt.xlabel('Date')
plt.ylabel('Nombre de passagers')
plt.legend()
plt.grid(True)
plt.show()

# Étape 9 : Interprétation des résultats
print("\nInterprétation des résultats :")
print("- La série montre une tendance saisonnière et une croissance globale.")
print("- Le modèle ARIMA prédit une continuation de la tendance saisonnière.")
print("- Les prévisions doivent être validées par des données supplémentaires ou d'autres métriques d'erreur.")